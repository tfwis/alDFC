pbmc <- pbmc3k
dfc_res <- DFC:::dfc.Seurat(pbmc, target_clusters=8, return_Model=TRUE)
pbmc <- NormalizeData(pbmc)
pbmc <- FindVariableFeatures(pbmc, nfeatures=2000)
pbmc <- RunPCA(pbmc, features=VariableFeatures(pbmc))
cor(matrix(rnorm(25),5,5),1:5)
cor(matrix(rnorm(25),5,5),1:3)
abs(cor(matrix(rnorm(25),5,5),1:3))\
abs(cor(matrix(rnorm(25),5,5),1:3))
pbmc3k$seurat_annotations
pbmc$seurat_annotations
pbmc <- NormalizeData(pbmc)
pbmc <- ScaleData(pbmc)
pbmc <- FindVariableFeatures(pbmc, nfeatures=2000)
pbmc <- RunPCA(pbmc, features=VariableFeatures(pbmc))
pbmc <- FindNeighbors(object=pbmc)
pbmc <- FindClusters(pbmc)
ncol(GetAssayData(pbmc,'scale.data’))
length(pbmc$seurat_clusters)
ncol(GetAssayData(pbmc,'scale.data’))
ncol(GetAssayData(pbmc,'scale.data’))
GetAssayData(pbmc,'scale.data’)
GetAssayData(pbmc,'scale.data'))
GetAssayData(pbmc,'scale.data')
ncol(GetAssayData(pbmc,'scale.data'))
length(pbmc$seurat_clusters)
dfc_res <- DFC:::dfc.Seurat(pbmc, target_clusters=8, return_Model=TRUE)
target <- '8'
target_label <- seurat_obj$seurat_clusters %in% target
)
source("~/R/alDFC/R/dfc.R", echo=TRUE)
data <- GetAssayData(pbmc,'scale.data’
target <- '8'
target_label <- seurat_obj$seurat_clusters %in% target
target <- '8'
target_label <- pbmc$seurat_clusters %in% target
data <- GetAssayData(pbmc,'scale.data’)
dfc_res <- DFC:::dfc.dgCMatrix(data, target_label, return_Model = TRUE)
dfc_class <- DFC:::dfc_classify.dgCMatrix(dfc_res$weights, pbmc)
target <- '8'
target_label <- pbmc$seurat_clusters %in% target
data <- GetAssayData(pbmc,'scale.data')
dfc_res <- DFC:::dfc.dgCMatrix(data, target_label, return_Model = TRUE)
target <- '8'
target_label <- pbmc$seurat_clusters %in% target
data <- GetAssayData(pbmc,'scale.data')
target <- '8'
target_label <- pbmc$seurat_clusters %in% target
data <- GetAssayData(pbmc,'scale.data')
dfc_res <- DFC:::dfc.dgCMatrix(data, target_label, return_Model = TRUE)
target <- '8'
target_label <- pbmc$seurat_clusters %in% target
data <- GetAssayData(pbmc,'scale.data')
dfc_res <- DFC:::dfc.dgCMatrix(data, target_label = target_label, return_Model = TRUE)
target <- '8'
target_label <- pbmc$seurat_clusters %in% target
data <- GetAssayData(pbmc,'scale.data')
dfc_res <- DFC:::dfc.dgCMatrix(data, pbmc$seurat_clusters, '8', return_Model = TRUE)
dfc_res <- DFC:::dfc.dgCMatrix(data, pbmc$seurat_clusters, '8', return_Model = TRUE)
library(SeuratData)
data("panc8")
# panc8 is a merged Seurat object containing 8 separate pancreas datasets
# split the object by dataset
pancreas.list <- SplitObject(panc8, split.by = "tech")
data("panc8")
data("panc8")
data("panc8.SeuratData")
SeuratData::InstalledData('panc8')
SeuratData::InstallData("panc8")
pancreas.list <- SplitObject(panc8, split.by = "tech")
# perform standard preprocessing on each object
for (i in 1:length(pancreas.list)) {
pancreas.list[[i]] <- NormalizeData(pancreas.list[[i]], verbose = FALSE)
pancreas.list[[i]] <- FindVariableFeatures(
pancreas.list[[i]], selection.method = "vst",
nfeatures = 2000, verbose = FALSE
)
}
# find anchors
anchors <- FindIntegrationAnchors(object.list = pancreas.list)
# integrate data
integrated <- IntegrateData(anchorset = anchors)
}
DFC:::dfc_classify.dgCMatrix(dfc_res$weights, data)
DFC:::dfc_classify.dgCMatrix(dfc_res$weights, data,cluster_label = target_label)
dfc_res <- DFC:::dfc.Seurat(pbmc, target_clusters=8, return_Model=TRUE)
DFC:::dfc_classify.Seurat(dfc_res$weights, pbmc)
dfc_res <- DFC:::dfc.Seurat(pbmc, target_clusters='8', return_Model=TRUE)
DFC:::dfc_classify.Seurat(dfc_res$weights, pbmc)
dfc_res <- DFC:::dfc.dgCMatrix(data, pbmc$seurat_clusters, '8', return_Model = TRUE)
dfc_res <- DFC:::dfc.dgCMatrix(data, target_label = pbmc$seurat_clusters == '8', return_Model = TRUE)
DFC:::dfc_classify.Seurat(dfc_res$weights, pbmc, cluster_label = pbmc$seurat_clusters == '8')
)
DFC:::dfc_classify.dgCMatrix(dfc_res$weights, pbmc, cluster_label = pbmc$seurat_clusters == '8')
DFC:::dfc_classify.dgCMatrix(dfc_res$weights, data, cluster_label = pbmc$seurat_clusters == '8')
gla(data)
dfc_res <- DFC:::dfc.dgCMatrix(data, target_label = pbmc$seurat_clusters == '8', return_Model = TRUE)
DFC:::dfc_classify.dgCMatrix(dfc_res$weights, data, cluster_label = pbmc$seurat_clusters == '8')
DFC:::dfc_classify.dgCMatrix(dfc_res$weights, data, cluster_label = pbmc)
DFC:::dfc_classify.dgCMatrix(dfc_res$weights, data, cluster_label = pbmc$seurat_clusters)
seurat_obj <- pbmc
target <- ‘8'
target <- "8"
cluster_label <- seurat_obj$seurat_clusters
target_label <- cluster_label %in% target
data <- GetAssayData(seurat_obj,”scale.data")
target <- "8"
cluster_label <- seurat_obj$seurat_clusters
target_label <- cluster_label %in% target
data <- GetAssayData(seurat_obj,"scale.data")
dfc_res <- DFC:::dfc.dgCMatrix(data, target_label =  target_label, return_Model = TRUE)
dfc_class <- DFC:::dfc_classify.dgCMatrix(dfc_res$weights, data, cluster_label = target_label)
dfc_class
dfc_class <- DFC:::dfc_classify.dgCMatrix(dfc_res$weights, data, cluster_label = cluster_label)
dfc_class
dfc.dgCMatrix(data, target_label =  target_label, return_Model = TRUE)
dfc(data, target_label =  target_label, return_Model = TRUE)
class(data)
gla9data
gla(data)
gla9data
pbmc %>% GetAssayData('data')
GetAssayData(dfc.dgCMatrix(data, target_label =  target_label, return_Model = TRUE),'data')
GetAssayData(pbmc,'data')
GetAssayData(pbmc,'data') %>% gla
gla(GetAssayData(pbmc,'data') )
GetAssayData(pbmc,'data')[10:15,10:15]
GetAssayData(pbmc,'data')[10:30,10:15]
GetAssayData(pbmc,'data')[25:30,10:15]
GetAssayData(pbmc,'data')[26:31,10:15]
GetAssayData(pbmc,'data')[c(27:30,40:45),10:15]
GetAssayData(pbmc,'data')[c(27:30,60:80),10:15]
GetAssayData(pbmc,'data')[c(27:30,80:100),10:15]
GetAssayData(pbmc,'data')[c(27:30,80:95),10:15]
GetAssayData(pbmc,'data')[c(27:30,95,100),10:15]
methods(cor)
methods(cor)
usemethods(cor)
methods(dim)
GetAssayData(pbmc3k,'scale.data')
GetAssayData(pbmc3k,'scale.data') %>% is.null
library(tidyverse)
GetAssayData(pbmc3k,'scale.data') %>% is.null
is.null(GetAssayData(pbmc3k,'scale.data'))
GetAssay(pbmc3k)
SeuratObject::DefaultAssay(pbmc)
class(pbmc)
class(panc8)
View(Seurat::UMAPPlot(\))
View(Seurat::UMAPPlot)
View(Seurat:::RunUMAP)
View(Seurat:::RunUMAP.default)
methods(RunUMAP)
View(dfc)
?dfc
S7
pacman::p_load(S7)
View(CheckDots())
View(CheckDots0
View(CheckDots)
?(CheckDots)
?CheckDots
#' @param min_feature minimum number to extract
#' @param max_feature maximum number to extract
#'
#' @returns \item{Ridge}{The model of ridge regression to calculate penalry.}
#' \item{AdaLasso}{The model of Adaptive Lasso for DFC extraction.}
#' \item{weights}{A data frame of extracted features and the weights. When
#' return_Model set FALSE, only weigths are returned.}
#'
#' @export
#'
dfc <- function(
data, ...
#target_clusters = NULL, target_label = NULL,
#gamma = 1, return_Model = FALSE, seed = NULL,
#lambda_penalty = "1se", lambda_weight = "1se",
#SIS = TRUE, min_feature = NULL, max_feature = NULL
) {
UseMethod("dfc",data)
}
dfc_res <- DFC::dfc(pbmc, target_clusters='8', return_Model=TRUE)
#' weights.
#' @param SIS Perform screening by SIS or not
#' @param min_feature minimum number to extract
#' @param max_feature maximum number to extract
#'
#' @returns \item{Ridge}{The model of ridge regression to calculate penalry.}
#' \item{AdaLasso}{The model of Adaptive Lasso for DFC extraction.}
#' \item{weights}{A data frame of extracted features and the weights. When
#' return_Model set FALSE, only weigths are returned.}
#'
dfc.Seurat <- function(
data, target_clusters, target_label = NULL,
gamma = 1, return_Model = FALSE, seed = NULL,
lambda_penalty = "1se", lambda_weight = "1se",
SIS = TRUE, min_feature = NULL, max_feature = NULL
) {
cat("Preprocessing...\n")
if(is.null(data@assays$RNA@scale.data)) stop("Please, run Seurat::ScaleData")
target_label <- data@meta.data$seurat_clusters %in% target_clusters
data <- data@assays$RNA@scale.data
if(SIS) data <- sis(data, target_label, min_feature, max_feature)
res <- AdaLasso(
data = data, label = target_label,
gamma = gamma, return_Model = return_Model, seed = seed,
lambda_penalty = lambda_penalty, lambda_weight = lambda_weight
)
return(res)
}
dfc_res <- DFC::dfc(pbmc, target_clusters='8', return_Model=TRUE)
library(glmnet)
dfc_res <- DFC::dfc(pbmc, target_clusters='8', return_Model=TRUE)
SeuratObject::DefaultAssay(pbmc)
?Seurat:::RunUMAP.default
dfc_classify(dfc_res,pbmc)
DFC::dfc_classify(dfc_res,pbmc)
#' than this parameter, the cluster is assumed expressing.
#' @param cluster_threshold Parameter to control expression specificity of
#' strong feature. When the number of expressed cluster is greater than this
#' parameter, the feature is assumed weak feature. In default, 30% of total
#' clusters.
#'
#' @returns Result data frame with DFC class.
#'
#' @export
#'
dfc_classify <- function(dfc_res,...) {
UseMethod(generic = "dfc_classify",object = dfc_res)
}
#' corresponding to the columns of data.
#' @param rate_threshold Parameter to judge which the feature is expressed or
#' not in the cluster.
#' @param cluster_threshold Parameter to control expression specificity of
#' strong feature.
#'
#' @importFrom stats cor
#'
#' @returns Result data frame with DFC class.
#'
dfc_classify.Seurat <- function(
dfc_res, data, cluster_label = NA,
rate_threshold = 0.25, cluster_threshold = NULL
) {
if(class(dfc_res)=="dfc_models") dfc_res <- dfc_res$weights
cluster_label <- data@meta.data$seurat_clusters
data <- data@assays$RNA@scale.data
useg <- intersect(dfc_res$feature,rownames(data))
data <- t(data[useg,])
splited_data <- split(as.data.frame(data), f=cluster_label)
posiRate <- sapply(splited_data, function(x) {
apply(x, 2, function(y) sum(y>min(y))/length(y))
})
posiCluster <- apply(posiRate>rate_threshold, 1, sum)
if(is.null(cluster_threshold)) cluster_threshold <- floor(0.3*ncol(posiRate))
dfc_class <- data.frame(
weight = dfc_res$weight,
posiCluster = posiCluster
)
dfc_class <- transform(
dfc_class,
class = ifelse(posiCluster==0, "niche", posiCluster)
)
dfc_class <- transform(
dfc_class,
class = ifelse(posiCluster<cluster_threshold,
"strong", "weak")
)
return(dfc_class)
}
DFC::dfc_classify(dfc_res,pbmc)
View(Seurat:::RunUMAP.default)
View(Seurat:::RunPCA.default)
View(Seurat:::RunPCA)
View(Seurat:::RunPCA.Seurat())
View(Seurat:::RunPCA.Seurat)
View(Seurat:::RunPCA.Seurat)
assay = NULL
assay %||% DefaultAssay(object = pbmc)
%||%
?%||%
View(%||%)
methods(%||%)
%||%
？(%||%)
?(%||%)
?(%||%)
assay = "Peak"
assay %||% DefaultAssay(object = pbmc)
DefaultAssay(panc8)
SeuratObject::%||%
panc8@assays$RNA@scale.data
GetAssayData(panc8,'scale.data') %>% fim
GetAssayData(panc8,'scale.data') %>% dim
integrated %>% DefaultAssay()
#' corresponding to the columns of data.
#' @param rate_threshold Parameter to judge which the feature is expressed or
#' not in the cluster.
#' @param cluster_threshold Parameter to control expression specificity of
#' strong feature.
#'
#' @importFrom stats cor
#'
#' @returns Result data frame with DFC class.
#'
dfc_classify.matrix <- function(
dfc_res, data, cluster_label,
rate_threshold = 0.25, cluster_threshold = NULL
) {
if(class(dfc_res)=="dfc_models") dfc_res <- dfc_res$weights
useg <- intersect(dfc_res$feature,rownames(data))
data <- t(data[useg,])
splited_data <- split(as.data.frame(data), f=cluster_label)
posiRate <- sapply(splited_data, function(x) {
apply(x, 2, function(y) sum(y>min(y))/length(y))
})
posiCluster <- apply(posiRate>rate_threshold, 1, sum)
if(is.null(cluster_threshold)) cluster_threshold <- floor(0.3*ncol(posiRate))
dfc_class <- data.frame(
weight = dfc_res$weight,
posiCluster = posiCluster
)
dfc_class <- transform(
dfc_class,
class = ifelse(posiCluster==0,
"niche", posiCluster)
)
dfc_class <- transform(
dfc_class,
class = ifelse(posiCluster<cluster_threshold,
"strong", "weak")
)
return(dfc_class)
}
#' weights.
#' @param SIS Perform screening by SIS or not
#' @param min_feature minimum number to extract
#' @param max_feature maximum number to extract
#'
#' @returns \item{Ridge}{The model of ridge regression to calculate penalry.}
#' \item{AdaLasso}{The model of Adaptive Lasso for DFC extraction.}
#' \item{weights}{A data frame of extracted features and the weights. When
#' return_Model set FALSE, only weigths are returned.}
#'
dfc.matrix <- function(
data, target_label,
gamma = 1, return_Model = FALSE, seed = NULL,
SIS = TRUE, min_feature = NULL, max_feature = NULL,
lambda_penalty = "1se", lambda_weight = "1se"
) {
if(ncol(data)!=length(target_label)){
stop("The column numbers and the label lengths must match.")
}
cat("Preprocessing...\n")
if(SIS) data <- sis(data, target_label, min_feature, max_feature)
res <- AdaLasso(
data = data, label = target_label,
gamma = gamma, return_Model = return_Model, seed = seed,
lambda_penalty = lambda_penalty, lambda_weight = lambda_weight
)
return(res)
}
dfc_res <- DFC:::dfc.dgCMatrix(data, target_label =  target_label, return_Model = TRUE)
dfc_res <- DFC:::dfc(data, target_label =  target_label, return_Model = TRUE)
dfc_res$weights %>% class
dfc_res$weights
dfc_res
readRDS("~/Documents/tomi")
hoge <- readRDS("~/Documents/co/tomimatsu/run011/processedData.rds")
hoge
hoge$meta[[1]]
hoge$FISH[[1]]
base <- "~/Documents/co/tomimatsu/run011/processed_tables/"
write_tsv(hoge$FISH[[1]],ffile("RowCount_rep1.tsv"))
dir.create(base)
write_tsv(hoge$FISH[[1]],ffile("RowCount_rep1.tsv"))
write_tsv(hoge$FISH[[2]],ffile("RowCount_rep2.tsv"))
write_tsv(hoge$meta[[2]],ffile("MetaData_rep2.tsv"))
write_tsv(hoge$meta[[1]],ffile("MetaData_rep1.tsv"))
GetAssayData(panc8,'scale.data')
dim(GetAssayData(panc8,'scale.data'))
length(GetAssayData(panc8,'scale.data'))
length(GetAssayData(pbmc,'scale.data'))
tes <- GetAssay(pbmc,'RNA')
tes
GetAssayData(tes,slot = 'scale.data')
GetAssayData(tes,slot = 'scale.data') %>% gla
smat <- GetAssayData(GetAssay(pbmc,assay),'scale.data')
assay
assay <- 'RNA'
smat <- GetAssayData(GetAssay(pbmc,assay),'scale.data')
gla(smat)
devtools::check()
devtools::document()
devtools::document()
devtools::check()
View(RunUMAP)
?(RunUMAP)
devtools::check()
devtools::check()
devtools::check()
View(dfc)
?dfc
devtools::check()
?(RunUMAP)
devtools::check()
View(RunUMAP)
inherits(dfc_res)
inherits(dfc_res,"dfc_models")
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
usethis::use_testthat()
devtools::check()
usethis::use_testthat()
devtools::check()
devtools::check()
devtools::check()
data("pbmc3k")
pbmc4k
pbmc3k
detach("package:DFC", unload = TRUE)
devtools::install_github('tfwis/alDFC')
pbmc3k <- NormalizeData(pbmc3k)
pbmc3k <- ScaleData(pbmc3k)
pbmc3k <- FindVariableFeatures(pbmc3k, nfeatures=2000)
pbmc3k <- RunPCA(pbmc3k, features=VariableFeatures(pbmc3k))
pbmc3k <- FindNeighbors(object=pbmc3k)
pbmc3k <- FindClusters(pbmc3k)
pbmc3k <- RunUMAP(pbmc3k, dims=1:10)
DimPlot(pbmc3k, reduction="umap")
library(alDFC)
dfc_res <- dfc(pbmc3k, target_clusters = 8, return_Model = TRUE)
library(alDFC)
dfc_res <- alDFC:::dfc.Seurat(pbmc3k, target_clusters = 8, return_Model = TRUE)
dfc_res
dfc_class <- alDFC:::dfc_classify.Seurat(pbmc3k,dfc_res)
dfc_res %>% class
devtools::check()
devtools::update_packages('tfwis/alDFC')
devtools::update_packages('alDFC')
devtools::update_packages('alDFC')
dfc_class <- alDFC:::dfc_classify.Seurat(pbmc3k,dfc_res)
dfc_class
dfc_class <- alDFC:::dfc_classify(pbmc3k,dfc_res)
dfc_class <- alDFC:::dfc_classify(GetAssayData(pbmc3k,'scale.data'),dfc_res,pbmc3k$seurat_clusters)
View(Seurat::RunUMAP)
alDFC
methods(alDFC::dfc)
methods(RunUMAP)
View(dfc)
devtools::check()
remove.packages("DFC")
remove.packages("alDFC")
devtools::install_packages('tfwis/alDFC')
devtools::install_github('tfwis/alDFC')
library(alDFC)
dfc_res <- dfc(pbmc3k, target_clusters = 8, return_Model = TRUE)
View(dfc)
methods(dfc)
View(dfc)
gla2 <- function(x) UseMethod("gla2",x)
gla2.matrix <- gla
source("~/R/alDFC/R/dfc.R", echo=TRUE)
source("~/R/use_function.R")
gla2.matrix <- gla
gla2.vector <- head
matrix(0,100,100) %>% gla
1:100 %>% gla
1:100 %>% gla2
matrix(0,100,100) %>% gla2
dfc_res <- dfc(pbmc3k, target_clusters = 8, return_Model = TRUE)
dfc_res <- dfc(pbmc3k, target_clusters = 8, return_Model = TRUE)
library(alDFC)
dfc_res <- dfc(pbmc3k, target_clusters = 8, return_Model = TRUE)
source("~/R/use_function.R")
dfc_res <- dfc(pbmc3k, target_clusters = 8, return_Model = TRUE)
dfc_res <- alDFC:::dfc(pbmc3k, target_clusters = 8, return_Model = TRUE)
dfc_res <- alDFC:::dfc.Seurat(pbmc3k, target_clusters = 8, return_Model = TRUE)
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::update_packages('alDFC')
library(alDFC)
dfc_res <- alDFC:::dfc(pbmc3k, target_clusters = 8, return_Model = TRUE)
dfc_class <- alDFC::dfc_classify(pbmc3k, dfc_res)
dfc_class
dfc_class <- alDFC::dfc_classify(GetAssayData(pbmc3k,'scale.data'), dfc_res,pbmc3k$seurat_clusters)
dfc_class
dfc_res2 <- alDFC::dfc(GetAssayData(pbmc3k,'scale.data'), '8',pbmc3k$seurat_clusters)
dfc_class2 <- alDFC::dfc_classify(GetAssayData(pbmc3k,'scale.data'), dfc_res2,pbmc3k$seurat_clusters)
dfc_res2
dfc_res2 %>% class
devtools::check()
devtools::check()
devtools::update_packages('alDFC')
library(alDFC)
dfc_res <- dfc(GetAssayData(pbmc3k,'scale.data'), target_clusters = 8, pbmc3k$seurat_clusters)
library(alDFC)
dfc_res <- dfc(GetAssayData(pbmc3k,'scale.data'), target_clusters = 8, pbmc3k$seurat_clusters)
dfc_res <- alDFC::dfc(GetAssayData(pbmc3k,'scale.data'), target_clusters = 8, pbmc3k$seurat_clusters)
dfc_class <- alDFC::dfc_classify(GetAssayData(pbmc3k,'scale.data'), dfc_res, pbmc3k$seurat_clusters)
dfc_class
